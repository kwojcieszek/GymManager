// <auto-generated />
using System;
using GymManager.DbModels.Engines;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace GymManager.Migrations.SqlServer
{
    [DbContext(typeof(SqlServerContext))]
    [Migration("20221130094123_2022-11-30")]
    partial class _20221130
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("GymManager.DbModels.CabinetKey", b =>
                {
                    b.Property<int>("CabinetKeyID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CabinetKeyID"), 1L, 1);

                    b.Property<int?>("AddedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateAdded")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<int?>("GenderID")
                        .HasColumnType("int");

                    b.Property<bool>("IsAcive")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastUsedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("CabinetKeyID");

                    b.HasIndex("AddedBy");

                    b.HasIndex("GenderID");

                    b.HasIndex("ModifiedBy");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("CabinetKeys");
                });

            modelBuilder.Entity("GymManager.DbModels.Company", b =>
                {
                    b.Property<int>("CompanyID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CompanyID"), 1L, 1);

                    b.Property<int?>("AddedBy")
                        .HasColumnType("int");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("DateAdded")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("IsAcive")
                        .HasColumnType("bit");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PostCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Street1")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Street2")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("TaxIdNumber")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CompanyID");

                    b.HasIndex("AddedBy");

                    b.HasIndex("ModifiedBy");

                    b.ToTable("Companies");
                });

            modelBuilder.Entity("GymManager.DbModels.DataTracking", b =>
                {
                    b.Property<int>("DataTrackingID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DataTrackingID"), 1L, 1);

                    b.Property<int?>("AddedBy")
                        .HasColumnType("int");

                    b.Property<int>("DataTrackingOperationID")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateAdded")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<string>("PrimaryKey")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("TableName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("DataTrackingID");

                    b.HasIndex("AddedBy");

                    b.HasIndex("DataTrackingOperationID");

                    b.HasIndex("ModifiedBy");

                    b.ToTable("DataTrackings");
                });

            modelBuilder.Entity("GymManager.DbModels.DataTrackingDefinition", b =>
                {
                    b.Property<int>("DataTrackingDefinitionID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DataTrackingDefinitionID"), 1L, 1);

                    b.Property<string>("ColumnName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DataTrackingID")
                        .HasColumnType("int");

                    b.Property<string>("NewData")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OldData")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DataTrackingDefinitionID");

                    b.HasIndex("DataTrackingID");

                    b.ToTable("DataTrackingDefinitions");
                });

            modelBuilder.Entity("GymManager.DbModels.DataTrackingOperation", b =>
                {
                    b.Property<int>("DataTrackingOperationID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DataTrackingOperationID"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("DataTrackingOperationID");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("DataTrackingOperations");

                    b.HasData(
                        new
                        {
                            DataTrackingOperationID = 1,
                            Name = "DODAWANIE"
                        },
                        new
                        {
                            DataTrackingOperationID = 2,
                            Name = "EDYTOWANIE"
                        },
                        new
                        {
                            DataTrackingOperationID = 3,
                            Name = "USUWANIE"
                        });
                });

            modelBuilder.Entity("GymManager.DbModels.Employee", b =>
                {
                    b.Property<int>("EmployeeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EmployeeID"), 1L, 1);

                    b.Property<int?>("AddedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("DateAdded")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("GenderID")
                        .HasColumnType("int");

                    b.Property<string>("Id")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("IsAcive")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<string>("Pesel")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Phone")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PostCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Street1")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Street2")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("EmployeeID");

                    b.HasIndex("AddedBy");

                    b.HasIndex("GenderID");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.HasIndex("ModifiedBy");

                    b.ToTable("Employees");
                });

            modelBuilder.Entity("GymManager.DbModels.EntryRegistry", b =>
                {
                    b.Property<int>("EntryRegistryID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EntryRegistryID"), 1L, 1);

                    b.Property<int?>("CabinetKeyID")
                        .HasColumnType("int");

                    b.Property<DateTime>("EntryDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ExitDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsAcive")
                        .HasColumnType("bit");

                    b.Property<int>("MemberID")
                        .HasColumnType("int");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<int?>("PassID")
                        .HasColumnType("int");

                    b.Property<int?>("VisitTime")
                        .HasColumnType("int");

                    b.HasKey("EntryRegistryID");

                    b.HasIndex("CabinetKeyID");

                    b.HasIndex("MemberID");

                    b.HasIndex("ModifiedBy");

                    b.HasIndex("PassID");

                    b.ToTable("EntriesRegistry");
                });

            modelBuilder.Entity("GymManager.DbModels.Gender", b =>
                {
                    b.Property<int>("GenderID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("GenderID"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("GenderID");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Genders");

                    b.HasData(
                        new
                        {
                            GenderID = 1,
                            Name = "NIE PODANO"
                        },
                        new
                        {
                            GenderID = 2,
                            Name = "MĘŻCZYZNA"
                        },
                        new
                        {
                            GenderID = 3,
                            Name = "KOBIETA"
                        });
                });

            modelBuilder.Entity("GymManager.DbModels.GymObject", b =>
                {
                    b.Property<int>("GymObjectID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("GymObjectID"), 1L, 1);

                    b.Property<int?>("AddedBy")
                        .HasColumnType("int");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("DateAdded")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("IsAcive")
                        .HasColumnType("bit");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PostCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Street1")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Street2")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("GymObjectID");

                    b.HasIndex("AddedBy");

                    b.HasIndex("ModifiedBy");

                    b.ToTable("GymObjects");
                });

            modelBuilder.Entity("GymManager.DbModels.Identifier", b =>
                {
                    b.Property<int>("IdentifierID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdentifierID"), 1L, 1);

                    b.Property<int?>("AddedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateAdded")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsAcive")
                        .HasColumnType("bit");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("MediaCarrierID")
                        .HasColumnType("int");

                    b.Property<int>("MemberID")
                        .HasColumnType("int");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.HasKey("IdentifierID");

                    b.HasIndex("AddedBy");

                    b.HasIndex("Key")
                        .IsUnique();

                    b.HasIndex("MediaCarrierID");

                    b.HasIndex("MemberID");

                    b.HasIndex("ModifiedBy");

                    b.ToTable("Identifiers");
                });

            modelBuilder.Entity("GymManager.DbModels.MediaCarrier", b =>
                {
                    b.Property<int>("MediaCarrierID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MediaCarrierID"), 1L, 1);

                    b.Property<bool>("IsAcive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("MediaCarrierID");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("MediaCarriers");

                    b.HasData(
                        new
                        {
                            MediaCarrierID = 1,
                            IsAcive = true,
                            Name = "KARTA RFID"
                        });
                });

            modelBuilder.Entity("GymManager.DbModels.Member", b =>
                {
                    b.Property<int>("MemberID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MemberID"), 1L, 1);

                    b.Property<int?>("AddedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("DateAdded")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("GenderID")
                        .HasColumnType("int");

                    b.Property<string>("Id")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("IsAcive")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<int?>("PassID")
                        .HasColumnType("int");

                    b.Property<string>("Pesel")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Phone")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PostCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Street1")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Street2")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("MemberID");

                    b.HasIndex("AddedBy");

                    b.HasIndex("GenderID");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.HasIndex("ModifiedBy");

                    b.HasIndex("PassID");

                    b.ToTable("Members");
                });

            modelBuilder.Entity("GymManager.DbModels.Message", b =>
                {
                    b.Property<int>("MessageID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MessageID"), 1L, 1);

                    b.Property<int?>("AddedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateAdded")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsAcive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEmail")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSms")
                        .HasColumnType("bit");

                    b.Property<string>("MessageContent")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MessageTypeID")
                        .HasColumnType("int");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.HasKey("MessageID");

                    b.HasIndex("AddedBy");

                    b.HasIndex("MessageTypeID");

                    b.HasIndex("ModifiedBy");

                    b.ToTable("Messages");
                });

            modelBuilder.Entity("GymManager.DbModels.MessageRegistry", b =>
                {
                    b.Property<int>("MessageRegistryID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MessageRegistryID"), 1L, 1);

                    b.Property<DateTime>("DateAdded")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("EmailSentDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ErrorMessage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsAcive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEmail")
                        .HasColumnType("bit");

                    b.Property<bool>("IsError")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSms")
                        .HasColumnType("bit");

                    b.Property<int>("MemberID")
                        .HasColumnType("int");

                    b.Property<string>("MessageContnet")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MessageID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("SmsSentDate")
                        .HasColumnType("datetime2");

                    b.HasKey("MessageRegistryID");

                    b.HasIndex("MemberID");

                    b.HasIndex("MessageID");

                    b.ToTable("MessagesRegistry");
                });

            modelBuilder.Entity("GymManager.DbModels.MessageType", b =>
                {
                    b.Property<int>("MessageTypeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MessageTypeID"), 1L, 1);

                    b.Property<bool>("IsAcive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEmail")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSms")
                        .HasColumnType("bit");

                    b.Property<string>("Message")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MessageTypeID");

                    b.ToTable("MessageTypes");
                });

            modelBuilder.Entity("GymManager.DbModels.Pass", b =>
                {
                    b.Property<int>("PassID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PassID"), 1L, 1);

                    b.Property<DateTime?>("AccessTimeFrom")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("AccessTimeTo")
                        .HasColumnType("datetime2");

                    b.Property<int?>("AddedBy")
                        .HasColumnType("int");

                    b.Property<bool?>("AskAddEntry")
                        .HasColumnType("bit");

                    b.Property<bool>("Continuation")
                        .HasColumnType("bit");

                    b.Property<DateTime>("DateAdded")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EentryNumberOfMonths")
                        .HasColumnType("int");

                    b.Property<decimal>("EntryNetPrice")
                        .HasColumnType("decimal(9,2)");

                    b.Property<decimal>("EntryPrice")
                        .HasColumnType("decimal(9,2)");

                    b.Property<bool>("IsAcive")
                        .HasColumnType("bit");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<decimal>("NetPrice")
                        .HasColumnType("decimal(9,2)");

                    b.Property<int>("PassTimeID")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(9,2)");

                    b.Property<int>("TaxID")
                        .HasColumnType("int");

                    b.HasKey("PassID");

                    b.HasIndex("AddedBy");

                    b.HasIndex("ModifiedBy");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("PassTimeID");

                    b.HasIndex("TaxID");

                    b.ToTable("Passes");

                    b.HasData(
                        new
                        {
                            PassID = 1,
                            AddedBy = 1,
                            Continuation = true,
                            DateAdded = new DateTime(2022, 11, 30, 10, 41, 22, 813, DateTimeKind.Local).AddTicks(4374),
                            Description = "",
                            EentryNumberOfMonths = 1,
                            EntryNetPrice = 0m,
                            EntryPrice = 0m,
                            IsAcive = true,
                            Name = "BRAK",
                            NetPrice = 0m,
                            PassTimeID = 5,
                            Price = 0m,
                            TaxID = 4
                        },
                        new
                        {
                            PassID = 2,
                            AddedBy = 1,
                            Continuation = true,
                            DateAdded = new DateTime(2022, 11, 30, 10, 41, 22, 813, DateTimeKind.Local).AddTicks(4378),
                            Description = "Wstpęp wolny na miesiąc",
                            EentryNumberOfMonths = 1,
                            EntryNetPrice = 20.00m,
                            EntryPrice = 18.52m,
                            IsAcive = true,
                            Name = "OPEN",
                            NetPrice = 100.93m,
                            PassTimeID = 3,
                            Price = 109.00m,
                            TaxID = 2
                        },
                        new
                        {
                            PassID = 3,
                            AccessTimeFrom = new DateTime(2000, 1, 1, 9, 0, 0, 0, DateTimeKind.Unspecified),
                            AccessTimeTo = new DateTime(2000, 1, 1, 14, 0, 0, 0, DateTimeKind.Unspecified),
                            AddedBy = 1,
                            Continuation = true,
                            DateAdded = new DateTime(2022, 11, 30, 10, 41, 22, 813, DateTimeKind.Local).AddTicks(4384),
                            Description = "Wstpęp wolny w godz. 9-14 na miesiąc",
                            EentryNumberOfMonths = 1,
                            EntryNetPrice = 20.00m,
                            EntryPrice = 18.52m,
                            IsAcive = true,
                            Name = "OPEN PORANNY",
                            NetPrice = 73.15m,
                            PassTimeID = 3,
                            Price = 79.00m,
                            TaxID = 2
                        },
                        new
                        {
                            PassID = 4,
                            AddedBy = 1,
                            Continuation = true,
                            DateAdded = new DateTime(2022, 11, 30, 10, 41, 22, 813, DateTimeKind.Local).AddTicks(4386),
                            Description = "Wstpęp wolny dla studentów",
                            EentryNumberOfMonths = 1,
                            EntryNetPrice = 0m,
                            EntryPrice = 0m,
                            IsAcive = true,
                            Name = "STUDENT",
                            NetPrice = 91.67m,
                            PassTimeID = 3,
                            Price = 99.00m,
                            TaxID = 2
                        },
                        new
                        {
                            PassID = 5,
                            AddedBy = 1,
                            Continuation = true,
                            DateAdded = new DateTime(2022, 11, 30, 10, 41, 22, 813, DateTimeKind.Local).AddTicks(4387),
                            Description = "Wstpęp wolny na miesiąc",
                            EentryNumberOfMonths = 1,
                            EntryNetPrice = 0m,
                            EntryPrice = 0m,
                            IsAcive = true,
                            Name = "PROMOCJA LUTY2022",
                            NetPrice = 91.67m,
                            PassTimeID = 3,
                            Price = 99.00m,
                            TaxID = 2
                        },
                        new
                        {
                            PassID = 6,
                            AddedBy = 1,
                            Continuation = true,
                            DateAdded = new DateTime(2022, 11, 30, 10, 41, 22, 813, DateTimeKind.Local).AddTicks(4389),
                            Description = "Wstpęp jednorazowy",
                            EentryNumberOfMonths = 1,
                            EntryNetPrice = 0m,
                            EntryPrice = 0m,
                            IsAcive = true,
                            Name = "JEDNORAZOWY",
                            NetPrice = 18.52m,
                            PassTimeID = 3,
                            Price = 20.00m,
                            TaxID = 2
                        });
                });

            modelBuilder.Entity("GymManager.DbModels.PassRegistry", b =>
                {
                    b.Property<int>("PassRegistryID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PassRegistryID"), 1L, 1);

                    b.Property<int?>("AddedBy")
                        .HasColumnType("int");

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Continuation")
                        .HasColumnType("bit");

                    b.Property<DateTime>("DateAdded")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("EndSuspensionDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("MemberID")
                        .HasColumnType("int");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<int>("PassID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("PaymentDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("StartSuspensionDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Suspension")
                        .HasColumnType("bit");

                    b.HasKey("PassRegistryID");

                    b.HasIndex("AddedBy");

                    b.HasIndex("MemberID");

                    b.HasIndex("ModifiedBy");

                    b.HasIndex("PassID");

                    b.ToTable("PassesRegistry");
                });

            modelBuilder.Entity("GymManager.DbModels.PassTime", b =>
                {
                    b.Property<int>("PassTimeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PassTimeID"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("PassTimeID");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("PassTimes");

                    b.HasData(
                        new
                        {
                            PassTimeID = 1,
                            Name = "Dzień"
                        },
                        new
                        {
                            PassTimeID = 2,
                            Name = "Tydzień"
                        },
                        new
                        {
                            PassTimeID = 3,
                            Name = "Miesiąć"
                        },
                        new
                        {
                            PassTimeID = 4,
                            Name = "Rok"
                        },
                        new
                        {
                            PassTimeID = 5,
                            Name = "Nieskonczony"
                        });
                });

            modelBuilder.Entity("GymManager.DbModels.PermissionList", b =>
                {
                    b.Property<int>("PermissionListID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PermissionListID"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("PermissionListID");

                    b.HasIndex("Name");

                    b.ToTable("PermissionsList");

                    b.HasData(
                        new
                        {
                            PermissionListID = 1,
                            Name = "DOSTĘP CZŁONKOWIE"
                        },
                        new
                        {
                            PermissionListID = 2,
                            Name = "DODAWANIE CZŁONKÓW"
                        },
                        new
                        {
                            PermissionListID = 3,
                            Name = "EDYCJA CZŁONKÓW"
                        },
                        new
                        {
                            PermissionListID = 4,
                            Name = "USWANIE CZŁONKÓW"
                        },
                        new
                        {
                            PermissionListID = 5,
                            Name = "DOSTĘP KARNETY CZŁONKOW"
                        },
                        new
                        {
                            PermissionListID = 6,
                            Name = "DODAWANIE KARNETÓW CZŁONKÓW"
                        },
                        new
                        {
                            PermissionListID = 7,
                            Name = "EDYCJA KARNETÓW CZŁONKÓW"
                        },
                        new
                        {
                            PermissionListID = 8,
                            Name = "USWANIE KARNETÓW CZŁONKÓW"
                        },
                        new
                        {
                            PermissionListID = 9,
                            Name = "DOSTĘP KLCUZE"
                        },
                        new
                        {
                            PermissionListID = 10,
                            Name = "DODAWANIE KLUCZY"
                        },
                        new
                        {
                            PermissionListID = 11,
                            Name = "EDYCJA KLUCZY"
                        },
                        new
                        {
                            PermissionListID = 12,
                            Name = "USWANIE KLUCZY"
                        },
                        new
                        {
                            PermissionListID = 13,
                            Name = "DOSTĘP KARNETY"
                        },
                        new
                        {
                            PermissionListID = 14,
                            Name = "DODAWANIE KARNETÓW"
                        },
                        new
                        {
                            PermissionListID = 15,
                            Name = "EDYCJA KARNETÓW"
                        },
                        new
                        {
                            PermissionListID = 16,
                            Name = "USWANIE KARNETÓW"
                        },
                        new
                        {
                            PermissionListID = 17,
                            Name = "DOSTĘP UŻYTKOWNICY"
                        },
                        new
                        {
                            PermissionListID = 18,
                            Name = "DODAWANIE UŻYTKOWNKÓW"
                        },
                        new
                        {
                            PermissionListID = 19,
                            Name = "EDYCJA UŻYTKOWNKÓW"
                        },
                        new
                        {
                            PermissionListID = 20,
                            Name = "USWANIE UŻYTKOWNKÓW"
                        },
                        new
                        {
                            PermissionListID = 21,
                            Name = "DOSTĘP OSOBY W OBIEKCIE"
                        },
                        new
                        {
                            PermissionListID = 22,
                            Name = "DOSTĘP WIADOMOŚCI"
                        },
                        new
                        {
                            PermissionListID = 23,
                            Name = "DOSTĘP REJESTR WEJŚĆ"
                        },
                        new
                        {
                            PermissionListID = 24,
                            Name = "DOSTĘP REJESTR OPERACJI"
                        },
                        new
                        {
                            PermissionListID = 25,
                            Name = "DOSTĘP USTAWIENIA"
                        },
                        new
                        {
                            PermissionListID = 26,
                            Name = "ZAMYKANIE WEJŚCIA CZŁONKÓW W OBIEKCIE"
                        },
                        new
                        {
                            PermissionListID = 27,
                            Name = "DODAJ WEJŚCIE/WYJŚCIE BEZ IDENTYFIKATORA"
                        });
                });

            modelBuilder.Entity("GymManager.DbModels.PermissionUser", b =>
                {
                    b.Property<int>("PermissionUserID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PermissionUserID"), 1L, 1);

                    b.Property<int?>("AddedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateAdded")
                        .HasColumnType("datetime2");

                    b.Property<int>("PermissionListID")
                        .HasColumnType("int");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.HasKey("PermissionUserID");

                    b.HasIndex("AddedBy");

                    b.HasIndex("PermissionListID");

                    b.HasIndex("UserID");

                    b.ToTable("PermissionsUsers");
                });

            modelBuilder.Entity("GymManager.DbModels.Photo", b =>
                {
                    b.Property<int>("PhotoID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PhotoID"), 1L, 1);

                    b.Property<int?>("AddedBy")
                        .HasColumnType("int");

                    b.Property<byte[]>("Data")
                        .HasColumnType("varbinary(max)");

                    b.Property<DateTime>("DateAdded")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<int>("MemberID")
                        .HasColumnType("int");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.HasKey("PhotoID");

                    b.HasIndex("AddedBy");

                    b.HasIndex("MemberID");

                    b.HasIndex("ModifiedBy");

                    b.ToTable("Photos");
                });

            modelBuilder.Entity("GymManager.DbModels.Tax", b =>
                {
                    b.Property<int>("TaxID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TaxID"), 1L, 1);

                    b.Property<DateTime>("DateAdded")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsAcive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("Rate")
                        .HasColumnType("int");

                    b.HasKey("TaxID");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Taxes");

                    b.HasData(
                        new
                        {
                            TaxID = 1,
                            DateAdded = new DateTime(2022, 11, 30, 10, 41, 22, 813, DateTimeKind.Local).AddTicks(4344),
                            IsAcive = true,
                            Name = "A",
                            Rate = 23
                        },
                        new
                        {
                            TaxID = 2,
                            DateAdded = new DateTime(2022, 11, 30, 10, 41, 22, 813, DateTimeKind.Local).AddTicks(4346),
                            IsAcive = true,
                            Name = "B",
                            Rate = 8
                        },
                        new
                        {
                            TaxID = 3,
                            DateAdded = new DateTime(2022, 11, 30, 10, 41, 22, 813, DateTimeKind.Local).AddTicks(4347),
                            IsAcive = true,
                            Name = "C",
                            Rate = 5
                        },
                        new
                        {
                            TaxID = 4,
                            DateAdded = new DateTime(2022, 11, 30, 10, 41, 22, 813, DateTimeKind.Local).AddTicks(4349),
                            IsAcive = true,
                            Name = "D",
                            Rate = 0
                        });
                });

            modelBuilder.Entity("GymManager.DbModels.User", b =>
                {
                    b.Property<int>("UserID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserID"), 1L, 1);

                    b.Property<int?>("AddedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateAdded")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("IsAcive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsAdmin")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Phone")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("UserID");

                    b.HasIndex("AddedBy");

                    b.HasIndex("ModifiedBy");

                    b.HasIndex("UserName")
                        .IsUnique();

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            UserID = 1,
                            DateAdded = new DateTime(2022, 11, 30, 10, 41, 22, 813, DateTimeKind.Local).AddTicks(4228),
                            FirstName = "Administrator",
                            IsAcive = true,
                            IsAdmin = true,
                            LastName = "systemu",
                            Password = "21232f297a57a5a743894a0e4a801fc3",
                            UserName = "admin"
                        });
                });

            modelBuilder.Entity("GymManager.DbModels.CabinetKey", b =>
                {
                    b.HasOne("GymManager.DbModels.User", "AddedByUser")
                        .WithMany()
                        .HasForeignKey("AddedBy");

                    b.HasOne("GymManager.DbModels.Gender", "Gender")
                        .WithMany()
                        .HasForeignKey("GenderID");

                    b.HasOne("GymManager.DbModels.User", "ModifiedByUser")
                        .WithMany()
                        .HasForeignKey("ModifiedBy");

                    b.Navigation("AddedByUser");

                    b.Navigation("Gender");

                    b.Navigation("ModifiedByUser");
                });

            modelBuilder.Entity("GymManager.DbModels.Company", b =>
                {
                    b.HasOne("GymManager.DbModels.User", "AddedByUser")
                        .WithMany()
                        .HasForeignKey("AddedBy");

                    b.HasOne("GymManager.DbModels.User", "ModifiedByUser")
                        .WithMany()
                        .HasForeignKey("ModifiedBy");

                    b.Navigation("AddedByUser");

                    b.Navigation("ModifiedByUser");
                });

            modelBuilder.Entity("GymManager.DbModels.DataTracking", b =>
                {
                    b.HasOne("GymManager.DbModels.User", "AddedByUser")
                        .WithMany()
                        .HasForeignKey("AddedBy");

                    b.HasOne("GymManager.DbModels.DataTrackingOperation", "DataTrackingOperation")
                        .WithMany()
                        .HasForeignKey("DataTrackingOperationID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GymManager.DbModels.User", "ModifiedByUser")
                        .WithMany()
                        .HasForeignKey("ModifiedBy");

                    b.Navigation("AddedByUser");

                    b.Navigation("DataTrackingOperation");

                    b.Navigation("ModifiedByUser");
                });

            modelBuilder.Entity("GymManager.DbModels.DataTrackingDefinition", b =>
                {
                    b.HasOne("GymManager.DbModels.DataTracking", "DataTracking")
                        .WithMany()
                        .HasForeignKey("DataTrackingID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DataTracking");
                });

            modelBuilder.Entity("GymManager.DbModels.Employee", b =>
                {
                    b.HasOne("GymManager.DbModels.User", "AddedByUser")
                        .WithMany()
                        .HasForeignKey("AddedBy");

                    b.HasOne("GymManager.DbModels.Gender", "Gender")
                        .WithMany()
                        .HasForeignKey("GenderID");

                    b.HasOne("GymManager.DbModels.User", "ModifiedByUser")
                        .WithMany()
                        .HasForeignKey("ModifiedBy");

                    b.Navigation("AddedByUser");

                    b.Navigation("Gender");

                    b.Navigation("ModifiedByUser");
                });

            modelBuilder.Entity("GymManager.DbModels.EntryRegistry", b =>
                {
                    b.HasOne("GymManager.DbModels.CabinetKey", "CabinetKey")
                        .WithMany()
                        .HasForeignKey("CabinetKeyID");

                    b.HasOne("GymManager.DbModels.Member", "Member")
                        .WithMany()
                        .HasForeignKey("MemberID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GymManager.DbModels.User", "ModifiedByUser")
                        .WithMany()
                        .HasForeignKey("ModifiedBy");

                    b.HasOne("GymManager.DbModels.Pass", "Pass")
                        .WithMany()
                        .HasForeignKey("PassID");

                    b.Navigation("CabinetKey");

                    b.Navigation("Member");

                    b.Navigation("ModifiedByUser");

                    b.Navigation("Pass");
                });

            modelBuilder.Entity("GymManager.DbModels.GymObject", b =>
                {
                    b.HasOne("GymManager.DbModels.User", "AddedByUser")
                        .WithMany()
                        .HasForeignKey("AddedBy");

                    b.HasOne("GymManager.DbModels.User", "ModifiedByUser")
                        .WithMany()
                        .HasForeignKey("ModifiedBy");

                    b.Navigation("AddedByUser");

                    b.Navigation("ModifiedByUser");
                });

            modelBuilder.Entity("GymManager.DbModels.Identifier", b =>
                {
                    b.HasOne("GymManager.DbModels.User", "AddedByUser")
                        .WithMany()
                        .HasForeignKey("AddedBy");

                    b.HasOne("GymManager.DbModels.MediaCarrier", "MediaCarrier")
                        .WithMany()
                        .HasForeignKey("MediaCarrierID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GymManager.DbModels.Member", "Member")
                        .WithMany()
                        .HasForeignKey("MemberID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GymManager.DbModels.User", "ModifiedByUser")
                        .WithMany()
                        .HasForeignKey("ModifiedBy");

                    b.Navigation("AddedByUser");

                    b.Navigation("MediaCarrier");

                    b.Navigation("Member");

                    b.Navigation("ModifiedByUser");
                });

            modelBuilder.Entity("GymManager.DbModels.Member", b =>
                {
                    b.HasOne("GymManager.DbModels.User", "AddedByUser")
                        .WithMany()
                        .HasForeignKey("AddedBy");

                    b.HasOne("GymManager.DbModels.Gender", "Gender")
                        .WithMany()
                        .HasForeignKey("GenderID");

                    b.HasOne("GymManager.DbModels.User", "ModifiedByUser")
                        .WithMany()
                        .HasForeignKey("ModifiedBy");

                    b.HasOne("GymManager.DbModels.Pass", "Pass")
                        .WithMany()
                        .HasForeignKey("PassID");

                    b.Navigation("AddedByUser");

                    b.Navigation("Gender");

                    b.Navigation("ModifiedByUser");

                    b.Navigation("Pass");
                });

            modelBuilder.Entity("GymManager.DbModels.Message", b =>
                {
                    b.HasOne("GymManager.DbModels.User", "AddedByUser")
                        .WithMany()
                        .HasForeignKey("AddedBy");

                    b.HasOne("GymManager.DbModels.MessageType", "MessageType")
                        .WithMany()
                        .HasForeignKey("MessageTypeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GymManager.DbModels.User", "ModifiedByUser")
                        .WithMany()
                        .HasForeignKey("ModifiedBy");

                    b.Navigation("AddedByUser");

                    b.Navigation("MessageType");

                    b.Navigation("ModifiedByUser");
                });

            modelBuilder.Entity("GymManager.DbModels.MessageRegistry", b =>
                {
                    b.HasOne("GymManager.DbModels.Member", "Member")
                        .WithMany()
                        .HasForeignKey("MemberID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GymManager.DbModels.Message", "Message")
                        .WithMany()
                        .HasForeignKey("MessageID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Member");

                    b.Navigation("Message");
                });

            modelBuilder.Entity("GymManager.DbModels.Pass", b =>
                {
                    b.HasOne("GymManager.DbModels.User", "AddedByUser")
                        .WithMany()
                        .HasForeignKey("AddedBy");

                    b.HasOne("GymManager.DbModels.User", "ModifiedByUser")
                        .WithMany()
                        .HasForeignKey("ModifiedBy");

                    b.HasOne("GymManager.DbModels.PassTime", "PassTime")
                        .WithMany()
                        .HasForeignKey("PassTimeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GymManager.DbModels.Tax", "Tax")
                        .WithMany()
                        .HasForeignKey("TaxID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AddedByUser");

                    b.Navigation("ModifiedByUser");

                    b.Navigation("PassTime");

                    b.Navigation("Tax");
                });

            modelBuilder.Entity("GymManager.DbModels.PassRegistry", b =>
                {
                    b.HasOne("GymManager.DbModels.User", "AddedByUser")
                        .WithMany()
                        .HasForeignKey("AddedBy");

                    b.HasOne("GymManager.DbModels.Member", "Member")
                        .WithMany()
                        .HasForeignKey("MemberID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GymManager.DbModels.User", "ModifiedByUser")
                        .WithMany()
                        .HasForeignKey("ModifiedBy");

                    b.HasOne("GymManager.DbModels.Pass", "Pass")
                        .WithMany()
                        .HasForeignKey("PassID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AddedByUser");

                    b.Navigation("Member");

                    b.Navigation("ModifiedByUser");

                    b.Navigation("Pass");
                });

            modelBuilder.Entity("GymManager.DbModels.PermissionUser", b =>
                {
                    b.HasOne("GymManager.DbModels.User", "AddedByUser")
                        .WithMany()
                        .HasForeignKey("AddedBy");

                    b.HasOne("GymManager.DbModels.PermissionList", "PermissionList")
                        .WithMany()
                        .HasForeignKey("PermissionListID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GymManager.DbModels.User", "User")
                        .WithMany()
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AddedByUser");

                    b.Navigation("PermissionList");

                    b.Navigation("User");
                });

            modelBuilder.Entity("GymManager.DbModels.Photo", b =>
                {
                    b.HasOne("GymManager.DbModels.User", "AddedByUser")
                        .WithMany()
                        .HasForeignKey("AddedBy");

                    b.HasOne("GymManager.DbModels.Member", "Member")
                        .WithMany()
                        .HasForeignKey("MemberID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GymManager.DbModels.User", "ModifiedByUser")
                        .WithMany()
                        .HasForeignKey("ModifiedBy");

                    b.Navigation("AddedByUser");

                    b.Navigation("Member");

                    b.Navigation("ModifiedByUser");
                });

            modelBuilder.Entity("GymManager.DbModels.User", b =>
                {
                    b.HasOne("GymManager.DbModels.User", "AddedByUser")
                        .WithMany()
                        .HasForeignKey("AddedBy");

                    b.HasOne("GymManager.DbModels.User", "ModifiedByUser")
                        .WithMany()
                        .HasForeignKey("ModifiedBy");

                    b.Navigation("AddedByUser");

                    b.Navigation("ModifiedByUser");
                });
#pragma warning restore 612, 618
        }
    }
}
